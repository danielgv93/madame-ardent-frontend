---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import SectionHeader from '../../components/dashboard/SectionHeader.astro';
import StatsCard from '../../components/dashboard/StatsCard.astro';
import Card from '../../components/dashboard/Card.astro';
import EmptyState from '../../components/dashboard/EmptyState.astro';
import Button from '../../components/Button.astro';
import { FORM_STATUS, FORM_STATUS_LABELS } from '../../lib/constants/form-status.ts';

const totalIcon = `<svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m0 0V9a2 2 0 012-2h2a2 2 0 012 2v4.01" />
</svg>`;

const weekIcon = `<svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>`;

const pendingIcon = `<svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>`;

const refreshIcon = `<svg class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
</svg>`;

const exportIcon = `<svg class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
</svg>`;
---

<DashboardLayout title="Formularios de Contacto">
    <div class="space-y-6">
        <!-- Header -->
        <SectionHeader 
            title="Formularios de Contacto" 
            description="Gestiona y revisa todos los formularios de contacto recibidos."
        >
            <Fragment slot="actions">
                <Button
                    id="export-btn"
                    variant="action"
                    size="sm"
                    class="mr-2"
                >
                    <Fragment set:html={exportIcon} />
                    Exportar CSV
                </Button>
                <Button
                    id="refresh-btn"
                    variant="secondary"
                    size="sm"
                >
                    <Fragment set:html={refreshIcon} />
                    Actualizar
                </Button>
            </Fragment>
        </SectionHeader>

        <!-- Stats -->
        <div class="grid grid-cols-1 gap-5 sm:grid-cols-3">
            <StatsCard 
                title="Total"
                value=""
                icon={totalIcon}
                iconColor="bg-blue-500"
                isLoading={false}
            >
                <span id="total-forms">Cargando...</span>
            </StatsCard>

            <StatsCard 
                title="Esta semana"
                value=""
                icon={weekIcon}
                iconColor="bg-green-500"
                isLoading={false}
            >
                <span id="week-forms">Cargando...</span>
            </StatsCard>

            <StatsCard 
                title="Pendientes"
                value=""
                icon={pendingIcon}
                iconColor="bg-yellow-500"
                isLoading={false}
            >
                <span id="pending-forms">Cargando...</span>
            </StatsCard>
        </div>

        <!-- Forms Table -->
        <Card>
            <div class="mb-4 flex justify-between items-center">
                <h4 class="text-lg font-medium text-gray-900">Lista de Formularios</h4>
                <div class="flex space-x-2">
                    <select id="status-filter" class="border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">Todos los estados</option>
                        <option value={FORM_STATUS.PENDING}>{FORM_STATUS_LABELS[FORM_STATUS.PENDING]}</option>
                        <option value={FORM_STATUS.READ}>{FORM_STATUS_LABELS[FORM_STATUS.READ]}</option>
                        <option value={FORM_STATUS.REPLIED}>{FORM_STATUS_LABELS[FORM_STATUS.REPLIED]}</option>
                    </select>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loading-state" class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
                <p class="mt-2 text-sm text-gray-500">Cargando formularios...</p>
            </div>

            <!-- Empty State -->
            <div id="empty-state" class="hidden">
                <EmptyState 
                    title="No hay formularios"
                    description="Aún no se han recibido formularios de contacto."
                    icon={totalIcon}
                />
            </div>

            <!-- Forms Table -->
            <div id="forms-table" class="hidden">
                <div>
                    <table class="min-w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Remitente
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Mensaje
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Fecha Creación
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Estado
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Fecha Respuesta
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Acciones
                                </th>
                            </tr>
                        </thead>
                        <tbody id="forms-tbody" class="bg-white divide-y divide-gray-200">
                            <!-- Forms will be populated here -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                <div id="pagination-container"></div>
            </div>
        </Card>
    </div>

    <!-- Form Detail Modal -->
    <div id="form-modal" class="fixed inset-0 z-50 overflow-y-auto hidden">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500/40 transition-opacity z-40"></div>
            
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full relative z-50">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                                Detalle del Formulario
                            </h3>
                            <div class="mt-4 space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Nombre:</label>
                                    <p id="modal-name" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Email:</label>
                                    <p id="modal-email" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Mensaje:</label>
                                    <p id="modal-message" class="mt-1 text-sm text-gray-900 whitespace-pre-wrap"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Fecha:</label>
                                    <p id="modal-date" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <Button
                        id="close-modal"
                        type="button"
                        variant="action"
                        size="md"
                        class="w-full sm:ml-3 sm:w-auto"
                    >
                        Cerrar
                    </Button>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Modal -->
    <div id="export-modal" class="fixed inset-0 z-50 overflow-y-auto hidden">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500/40 transition-opacity z-40"></div>
            
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full relative z-50">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">
                                Exportar Formularios a CSV
                            </h3>
                            <div class="mt-4 space-y-4">
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <label for="export-date-from" class="block text-sm font-medium text-gray-700 mb-1">
                                            Fecha desde:
                                        </label>
                                        <input
                                            type="date"
                                            id="export-date-from"
                                            class="w-full border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                                        />
                                    </div>
                                    <div>
                                        <label for="export-date-to" class="block text-sm font-medium text-gray-700 mb-1">
                                            Fecha hasta:
                                        </label>
                                        <input
                                            type="date"
                                            id="export-date-to"
                                            class="w-full border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                                        />
                                    </div>
                                </div>
                                <div>
                                    <label for="export-status" class="block text-sm font-medium text-gray-700 mb-1">
                                        Estado:
                                    </label>
                                    <select
                                        id="export-status"
                                        class="w-full border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                                    >
                                        <option value="">Todos los estados</option>
                                        <option value={FORM_STATUS.PENDING}>{FORM_STATUS_LABELS[FORM_STATUS.PENDING]}</option>
                                        <option value={FORM_STATUS.READ}>{FORM_STATUS_LABELS[FORM_STATUS.READ]}</option>
                                        <option value={FORM_STATUS.REPLIED}>{FORM_STATUS_LABELS[FORM_STATUS.REPLIED]}</option>
                                    </select>
                                </div>
                                <div class="text-sm text-gray-500">
                                    <p>Deja los campos vacíos para no filtrar por ese criterio.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <Button
                        id="confirm-export"
                        type="button"
                        variant="action"
                        size="md"
                        class="w-full sm:ml-3 sm:w-auto"
                    >
                        Exportar CSV
                    </Button>
                    <Button
                        id="cancel-export"
                        type="button"
                        variant="secondary"
                        size="md"
                        class="mt-3 w-full sm:mt-0 sm:w-auto"
                    >
                        Cancelar
                    </Button>
                </div>
            </div>
        </div>
    </div>

    <script>
        import { authenticatedFetch } from '../../lib/client-api.ts';
        import { FORM_STATUS, FORM_STATUS_LABELS, FORM_STATUS_COLORS } from '../../lib/constants/form-status.ts';
        
        interface FormData {
            id: string;
            name: string;
            email: string;
            phone?: string;
            message: string;
            createdAt: string;
            status?: typeof FORM_STATUS[keyof typeof FORM_STATUS];
            respondedAt?: string;
        }

        interface PaginationData {
            currentPage: number;
            totalPages: number;
            totalCount: number;
            limit: number;
            hasNextPage: boolean;
            hasPreviousPage: boolean;
        }
        
        let allForms: FormData[] = [];
        let filteredForms: FormData[] = [];
        let currentPagination: PaginationData | null = null;
        let currentPage = 1;
        
        document.addEventListener('DOMContentLoaded', function() {
            loadForms();
            
            // Event listeners
            const refreshBtn = document.getElementById('refresh-btn');
            const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
            const closeModal = document.getElementById('close-modal');
            const exportBtn = document.getElementById('export-btn');
            const cancelExport = document.getElementById('cancel-export');
            const confirmExport = document.getElementById('confirm-export');
            
            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => loadForms(currentPage));
            }
            
            if (statusFilter) {
                statusFilter.addEventListener('change', filterForms);
            }
            
            if (closeModal) {
                closeModal.addEventListener('click', hideModal);
            }
            
            if (exportBtn) {
                exportBtn.addEventListener('click', showExportModal);
            }
            
            if (cancelExport) {
                cancelExport.addEventListener('click', hideExportModal);
            }
            
            if (confirmExport) {
                confirmExport.addEventListener('click', exportCSV);
            }
            
            // Close modal on backdrop click
            const modal = document.getElementById('form-modal');
            if (modal) {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        hideModal();
                    }
                });
            }
            
            // Close export modal on backdrop click
            const exportModal = document.getElementById('export-modal');
            if (exportModal) {
                exportModal.addEventListener('click', (e) => {
                    if (e.target === exportModal) {
                        hideExportModal();
                    }
                });
            }
        });
        
        async function loadForms(page: number = 1) {
            try {
                showLoading();
                currentPage = page;
                
                // Load forms and stats in parallel
                const [formsResponse, statsResponse] = await Promise.all([
                    authenticatedFetch(`/api/forms?page=${page}&limit=10`),
                    authenticatedFetch('/api/forms/stats')
                ]);
                
                if (formsResponse.ok && statsResponse.ok) {
                    const formsData = await formsResponse.json();
                    const statsData = await statsResponse.json();
                    
                    allForms = formsData.forms;
                    currentPagination = formsData.pagination;
                    filteredForms = [...allForms];
                    
                    updateStats(statsData);
                    renderFormsTable();
                    updatePagination();
                    
                } else {
                    console.error('Error loading forms or stats');
                    showError('Error al cargar los formularios');
                }
            } catch (error) {
                console.error('Error loading forms:', error);
                showError('Error de conexión');
            }
        }
        
        function updateStats(statsData?: any) {
            const totalElement = document.getElementById('total-forms');
            const weekElement = document.getElementById('week-forms');
            const pendingElement = document.getElementById('pending-forms');
            
            if (statsData) {
                // Use stats from API
                if (totalElement) {
                    totalElement.textContent = statsData.total.toString();
                }
                if (weekElement) {
                    weekElement.textContent = statsData.thisWeek.toString();
                }
                if (pendingElement) {
                    pendingElement.textContent = statsData.pending.toString();
                }
            } else {
                // Fallback to pagination data for total count
                if (totalElement && currentPagination) {
                    totalElement.textContent = currentPagination.totalCount.toString();
                }
                
                // Calculate this week's forms from current page only (fallback)
                const oneWeekAgo = new Date();
                oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
                
                const thisWeekForms = allForms.filter(form => 
                    new Date(form.createdAt) >= oneWeekAgo
                );
                
                if (weekElement) {
                    weekElement.textContent = thisWeekForms.length.toString();
                }
                
                // Calculate pending forms from current page only (fallback)
                const pendingForms = allForms.filter(form => 
                    !form.status || form.status === FORM_STATUS.PENDING
                );
                
                if (pendingElement) {
                    pendingElement.textContent = pendingForms.length.toString();
                }
            }
        }
        
        function filterForms() {
            const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
            const selectedStatus = statusFilter?.value;
            
            if (!selectedStatus) {
                filteredForms = [...allForms];
            } else {
                filteredForms = allForms.filter(form => 
                    (form.status || FORM_STATUS.PENDING) === selectedStatus
                );
            }
            
            renderFormsTable();
        }
        
        function renderFormsTable() {
            const loadingState = document.getElementById('loading-state');
            const emptyState = document.getElementById('empty-state');
            const formsTable = document.getElementById('forms-table');
            const tbody = document.getElementById('forms-tbody');
            
            // Hide loading
            if (loadingState) loadingState.classList.add('hidden');
            
            if (filteredForms.length === 0) {
                if (emptyState) emptyState.classList.remove('hidden');
                if (formsTable) formsTable.classList.add('hidden');
                return;
            }
            
            if (emptyState) emptyState.classList.add('hidden');
            if (formsTable) formsTable.classList.remove('hidden');
            
            if (tbody) {
                tbody.innerHTML = '';
                
                filteredForms.forEach(form => {
                    const row = createFormRow(form);
                    tbody.appendChild(row);
                });
            }
        }

        function updatePagination() {
            const paginationContainer = document.getElementById('pagination-container');
            
            if (!currentPagination || currentPagination.totalPages <= 1) {
                if (paginationContainer) paginationContainer.classList.add('hidden');
                return;
            }
            
            if (paginationContainer) {
                paginationContainer.classList.remove('hidden');
                paginationContainer.innerHTML = generatePaginationHTML();
            }
        }

        function generatePaginationHTML(): string {
            if (!currentPagination) return '';
            
            const { currentPage, totalPages } = currentPagination;
            const maxVisible = 5;
            
            function getVisiblePages(current: number, total: number): number[] {
                if (total <= maxVisible) {
                    return Array.from({ length: total }, (_, i) => i + 1);
                }

                const half = Math.floor(maxVisible / 2);
                let start = Math.max(1, current - half);
                let end = Math.min(total, start + maxVisible - 1);

                if (end - start + 1 < maxVisible) {
                    start = Math.max(1, end - maxVisible + 1);
                }

                return Array.from({ length: end - start + 1 }, (_, i) => start + i);
            }

            const visiblePages = getVisiblePages(currentPage, totalPages);
            const hasPrevious = currentPage > 1;
            const hasNext = currentPage < totalPages;

            const prevIcon = `<svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>`;

            const nextIcon = `<svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>`;

            return `
                <div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
                    <div class="flex flex-1 justify-between sm:hidden">
                        <button
                            class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 ${!hasPrevious ? 'opacity-50 cursor-not-allowed' : ''}"
                            onclick="${hasPrevious ? `changePage(${currentPage - 1})` : ''}"
                            ${!hasPrevious ? 'disabled' : ''}
                        >
                            Anterior
                        </button>
                        <button
                            class="relative ml-3 inline-flex items-center rounded-md cursor-pointer border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 ${!hasNext ? 'opacity-50 cursor-not-allowed' : ''}"
                            onclick="${hasNext ? `changePage(${currentPage + 1})` : ''}"
                            ${!hasNext ? 'disabled' : ''}
                        >
                            Siguiente
                        </button>
                    </div>
                    <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
                        <div>
                            <p class="text-sm text-gray-700">
                                Página <span class="font-medium">${currentPage}</span> de <span class="font-medium">${totalPages}</span>
                            </p>
                        </div>
                        <div>
                            <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                                <button
                                    class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${!hasPrevious ? 'opacity-50 cursor-not-allowed' : 'hover:text-gray-600'}"
                                    onclick="${hasPrevious ? `changePage(${currentPage - 1})` : ''}"
                                    ${!hasPrevious ? 'disabled' : ''}
                                >
                                    <span class="sr-only">Anterior</span>
                                    ${prevIcon}
                                </button>

                                ${visiblePages.map(page => `
                                    <button
                                        class="relative inline-flex items-center px-4 py-2 text-sm font-semibold cursor-pointer ${
                                            page === currentPage
                                                ? 'z-10 bg-indigo-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600'
                                                : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'
                                        }"
                                        onclick="changePage(${page})"
                                    >
                                        ${page}
                                    </button>
                                `).join('')}

                                <button
                                    class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${!hasNext ? 'opacity-50 cursor-not-allowed' : 'hover:text-gray-600'}"
                                    onclick="${hasNext ? `changePage(${currentPage + 1})` : ''}"
                                    ${!hasNext ? 'disabled' : ''}
                                >
                                    <span class="sr-only">Siguiente</span>
                                    ${nextIcon}
                                </button>
                            </nav>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function createFormRow(form: FormData): HTMLTableRowElement {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50';
            
            const status = form.status || FORM_STATUS.PENDING;
            
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${escapeHtml(form.name)}</div>
                    <div class="text-sm text-gray-500">${escapeHtml(form.email)}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${escapeHtml(form.message)}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${formatDate(form.createdAt)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="relative">
                        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full cursor-pointer hover:opacity-80 ${FORM_STATUS_COLORS[status]}" 
                              onclick="toggleStatusDropdown('${form.id}')"
                              id="status-tag-${form.id}">
                            ${FORM_STATUS_LABELS[status]}
                        </span>
                        <div id="status-dropdown-${form.id}" class="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-10 min-w-32 hidden">
                            <button class="block w-full text-left px-3 py-2 text-xs cursor-pointer hover:bg-gray-50 ${status === FORM_STATUS.PENDING ? 'bg-yellow-50 text-yellow-800' : 'text-gray-700'}" 
                                    onclick="updateFormStatus('${form.id}', '${FORM_STATUS.PENDING}')">
                                ${FORM_STATUS_LABELS[FORM_STATUS.PENDING]}
                            </button>
                            <button class="block w-full text-left px-3 py-2 text-xs cursor-pointer hover:bg-gray-50 ${status === FORM_STATUS.READ ? 'bg-blue-50 text-blue-800' : 'text-gray-700'}" 
                                    onclick="updateFormStatus('${form.id}', '${FORM_STATUS.READ}')">
                                ${FORM_STATUS_LABELS[FORM_STATUS.READ]}
                            </button>
                            <button class="block w-full text-left px-3 py-2 text-xs cursor-pointer hover:bg-gray-50 ${status === FORM_STATUS.REPLIED ? 'bg-green-50 text-green-800' : 'text-gray-700'}" 
                                    onclick="updateFormStatus('${form.id}', '${FORM_STATUS.REPLIED}')">
                                ${FORM_STATUS_LABELS[FORM_STATUS.REPLIED]}
                            </button>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${form.respondedAt ? formatDate(form.respondedAt) : '-'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button class="text-indigo-600 hover:text-indigo-900 mr-3 cursor-pointer" onclick="viewForm('${form.id}')">
                        Ver
                    </button>
                    <a href="mailto:${form.email}" class="text-green-600 hover:text-green-900">
                        Responder
                    </a>
                </td>
            `;
            
            return row;
        }
        
        function formatDate(dateString: string): string {
            const date = new Date(dateString);
            return date.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        function escapeHtml(text: string): string {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // Global function for row buttons
        (window as any).viewForm = function(formId: string) {
            const form = allForms.find(f => f.id === formId);
            if (form) {
                showFormModal(form);
            }
        };

        // Global function for pagination
        (window as any).changePage = function(page: number) {
            if (page >= 1 && currentPagination && page <= currentPagination.totalPages) {
                loadForms(page);
            }
        };
        
        function showFormModal(form: FormData) {
            const modal = document.getElementById('form-modal');
            const modalName = document.getElementById('modal-name');
            const modalEmail = document.getElementById('modal-email');
            const modalMessage = document.getElementById('modal-message');
            const modalDate = document.getElementById('modal-date');
            
            if (modalName) modalName.textContent = form.name;
            if (modalEmail) modalEmail.textContent = form.email;
            if (modalMessage) modalMessage.textContent = form.message;
            if (modalDate) modalDate.textContent = formatDate(form.createdAt);
            
            if (modal) {
                modal.classList.remove('hidden');
            }
        }
        
        function hideModal() {
            const modal = document.getElementById('form-modal');
            if (modal) {
                modal.classList.add('hidden');
            }
        }
        
        function showLoading() {
            const loadingState = document.getElementById('loading-state');
            const emptyState = document.getElementById('empty-state');
            const formsTable = document.getElementById('forms-table');
            
            if (loadingState) loadingState.classList.remove('hidden');
            if (emptyState) emptyState.classList.add('hidden');
            if (formsTable) formsTable.classList.add('hidden');
        }
        
        function showError(message: string) {
            console.error(message);
            // Could add a toast notification here
        }
        
        function showExportModal() {
            const modal = document.getElementById('export-modal');
            if (modal) {
                modal.classList.remove('hidden');
            }
        }
        
        function hideExportModal() {
            const modal = document.getElementById('export-modal');
            if (modal) {
                modal.classList.add('hidden');
                // Clear form fields
                const dateFromInput = document.getElementById('export-date-from') as HTMLInputElement;
                const dateToInput = document.getElementById('export-date-to') as HTMLInputElement;
                const statusSelect = document.getElementById('export-status') as HTMLSelectElement;
                
                if (dateFromInput) dateFromInput.value = '';
                if (dateToInput) dateToInput.value = '';
                if (statusSelect) statusSelect.value = '';
            }
        }
        
        async function exportCSV() {
            try {
                // Get filter values
                const dateFromInput = document.getElementById('export-date-from') as HTMLInputElement;
                const dateToInput = document.getElementById('export-date-to') as HTMLInputElement;
                const statusSelect = document.getElementById('export-status') as HTMLSelectElement;
                
                const dateFrom = dateFromInput?.value || '';
                const dateTo = dateToInput?.value || '';
                const status = statusSelect?.value || '';
                
                // Build query parameters
                const params = new URLSearchParams();
                if (dateFrom) params.append('dateFrom', dateFrom);
                if (dateTo) params.append('dateTo', dateTo);
                if (status) params.append('status', status);
                
                const url = `/api/forms/export?${params.toString()}`;
                
                // Make authenticated request
                const response = await authenticatedFetch(url);
                
                if (response.ok) {
                    // Get the CSV content
                    const csvContent = await response.text();
                    
                    // Create blob and download
                    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                    const link = document.createElement('a');
                    
                    // Create filename with current date
                    const currentDate = new Date().toISOString().split('T')[0];
                    const filename = `formularios-${currentDate}.csv`;
                    
                    if (link.download !== undefined) {
                        const url = URL.createObjectURL(blob);
                        link.setAttribute('href', url);
                        link.setAttribute('download', filename);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        URL.revokeObjectURL(url);
                    }
                    
                    hideExportModal();
                } else {
                    console.error('Error exporting CSV:', await response.text());
                    showError('Error al exportar CSV');
                }
            } catch (error) {
                console.error('Error exporting CSV:', error);
                showError('Error de conexión al exportar');
            }
        }
        
        // Global functions for status management
        (window as any).toggleStatusDropdown = function(formId: string) {
            const dropdown = document.getElementById(`status-dropdown-${formId}`);
            
            // Hide all other dropdowns first
            document.querySelectorAll('[id^="status-dropdown-"]').forEach((element) => {
                if (element.id !== `status-dropdown-${formId}`) {
                    element.classList.add('hidden');
                }
            });
            
            if (dropdown) {
                dropdown.classList.toggle('hidden');
            }
        };
        
        (window as any).updateFormStatus = async function(formId: string, newStatus: string) {
            try {
                const response = await authenticatedFetch(`/api/forms/${formId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: newStatus })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    
                    // Update the form in local data
                    const formIndex = allForms.findIndex(f => f.id === formId);
                    if (formIndex !== -1) {
                        allForms[formIndex].status = newStatus as typeof FORM_STATUS[keyof typeof FORM_STATUS];
                        if (result.form.respondedAt) {
                            allForms[formIndex].respondedAt = result.form.respondedAt;
                        } else {
                            delete allForms[formIndex].respondedAt;
                        }
                    }
                    
                    // Hide dropdown
                    const dropdown = document.getElementById(`status-dropdown-${formId}`);
                    if (dropdown) {
                        dropdown.classList.add('hidden');
                    }
                    
                    // Refresh the view and stats
                    filterForms();
                    
                    // Reload stats to get accurate counts
                    try {
                        const statsResponse = await authenticatedFetch('/api/forms/stats');
                        if (statsResponse.ok) {
                            const statsData = await statsResponse.json();
                            updateStats(statsData);
                        }
                    } catch (error) {
                        console.error('Error reloading stats:', error);
                    }
                    
                } else {
                    console.error('Error updating form status:', await response.text());
                    showError('Error al actualizar el estado del formulario');
                }
            } catch (error) {
                console.error('Error updating form status:', error);
                showError('Error de conexión al actualizar estado');
            }
        };
        
        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            const target = event.target as HTMLElement;
            if (!target.closest('[id^="status-dropdown-"]') && !target.closest('[id^="status-tag-"]')) {
                document.querySelectorAll('[id^="status-dropdown-"]').forEach((dropdown) => {
                    dropdown.classList.add('hidden');
                });
            }
        });
    </script>
</DashboardLayout>