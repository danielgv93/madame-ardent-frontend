---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import SectionHeader from '../../components/dashboard/SectionHeader.astro';
import StatsCard from '../../components/dashboard/StatsCard.astro';
import Card from '../../components/dashboard/Card.astro';
import EmptyState from '../../components/dashboard/EmptyState.astro';
import Button from '../../components/Button.astro';
import Modal from '../../components/Modal.astro';
import FormsTable from '../../components/dashboard/FormsTable.astro';
import { FORM_STATUS, FORM_STATUS_LABELS } from '../../lib/constants/form-status.ts';
import { FORM_ICONS } from '../../lib/constants/icons.ts';
---

<DashboardLayout title="Formularios de Contacto">
    <div class="space-y-6">
        <!-- Header -->
        <SectionHeader 
            title="Formularios de Contacto" 
            description="Gestiona y revisa todos los formularios de contacto recibidos."
        >
            <Fragment slot="actions">
                <Button
                    id="export-btn"
                    variant="action"
                    size="sm"
                    class="mr-2"
                >
                    <Fragment set:html={FORM_ICONS.EXPORT} />
                    Exportar CSV
                </Button>
                <Button
                    id="refresh-btn"
                    variant="secondary"
                    size="sm"
                >
                    <Fragment set:html={FORM_ICONS.REFRESH} />
                    Actualizar
                </Button>
            </Fragment>
        </SectionHeader>

        <!-- Stats -->
        <div class="grid grid-cols-1 gap-5 sm:grid-cols-3">
            <StatsCard 
                title="Total"
                value=""
                icon={FORM_ICONS.TOTAL}
                iconColor="bg-blue-500"
                isLoading={false}
            >
                <span id="total-forms">Cargando...</span>
            </StatsCard>

            <StatsCard 
                title="Esta semana"
                value=""
                icon={FORM_ICONS.WEEK}
                iconColor="bg-green-500"
                isLoading={false}
            >
                <span id="week-forms">Cargando...</span>
            </StatsCard>

            <StatsCard 
                title="Pendientes"
                value=""
                icon={FORM_ICONS.PENDING}
                iconColor="bg-yellow-500"
                isLoading={false}
            >
                <span id="pending-forms">Cargando...</span>
            </StatsCard>
        </div>

        <!-- Forms Table -->
        <Card>
            <div class="mb-4 flex justify-between items-center">
                <h4 class="text-lg font-medium text-gray-900">Lista de Formularios</h4>
                <div class="flex space-x-2">
                    <select id="status-filter" class="border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">Todos los estados</option>
                        <option value={FORM_STATUS.PENDING}>{FORM_STATUS_LABELS[FORM_STATUS.PENDING]}</option>
                        <option value={FORM_STATUS.READ}>{FORM_STATUS_LABELS[FORM_STATUS.READ]}</option>
                        <option value={FORM_STATUS.REPLIED}>{FORM_STATUS_LABELS[FORM_STATUS.REPLIED]}</option>
                    </select>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loading-state" class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
                <p class="mt-2 text-sm text-gray-500">Cargando formularios...</p>
            </div>

            <!-- Empty State -->
            <div id="empty-state" class="hidden">
                <EmptyState 
                    title="No hay formularios"
                    description="Aún no se han recibido formularios de contacto."
                    icon={FORM_ICONS.TOTAL}
                />
            </div>

            <!-- Forms Table -->
            <FormsTable />
        </Card>
    </div>

    <!-- Form Detail Modal -->
    <Modal id="form-modal" title="Detalle del Formulario">
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700">Nombre:</label>
                <p id="modal-name" class="mt-1 text-sm text-gray-900"></p>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Email:</label>
                <div id="modal-email-container" class="mt-1">
                    <!-- Email content will be populated by JavaScript -->
                </div>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Mensaje:</label>
                <div class="mt-1 max-h-48 overflow-y-auto border border-gray-200 rounded-md p-3">
                    <p id="modal-message" class="text-sm text-gray-900 whitespace-pre-wrap"></p>
                </div>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Fecha:</label>
                <p id="modal-date" class="mt-1 text-sm text-gray-900"></p>
            </div>
        </div>
        
        <Fragment slot="footer">
            <Button
                id="close-modal"
                type="button"
                variant="action"
                size="md"
                class="w-full sm:ml-3 sm:w-auto"
            >
                Cerrar
            </Button>
        </Fragment>
    </Modal>

    <!-- Export Modal -->
    <Modal id="export-modal" title="Exportar Formularios a CSV">
        <div class="space-y-4">
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <label for="export-date-from" class="block text-sm font-medium text-gray-700 mb-1">
                        Fecha desde:
                    </label>
                    <input
                        type="date"
                        id="export-date-from"
                        class="w-full border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                    />
                </div>
                <div>
                    <label for="export-date-to" class="block text-sm font-medium text-gray-700 mb-1">
                        Fecha hasta:
                    </label>
                    <input
                        type="date"
                        id="export-date-to"
                        class="w-full border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                    />
                </div>
            </div>
            <div>
                <label for="export-status" class="block text-sm font-medium text-gray-700 mb-1">
                    Estado:
                </label>
                <select
                    id="export-status"
                    class="w-full border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500"
                >
                    <option value="">Todos los estados</option>
                    <option value={FORM_STATUS.PENDING}>{FORM_STATUS_LABELS[FORM_STATUS.PENDING]}</option>
                    <option value={FORM_STATUS.READ}>{FORM_STATUS_LABELS[FORM_STATUS.READ]}</option>
                    <option value={FORM_STATUS.REPLIED}>{FORM_STATUS_LABELS[FORM_STATUS.REPLIED]}</option>
                </select>
            </div>
            <div class="text-sm text-gray-500">
                <p>Deja los campos vacíos para no filtrar por ese criterio.</p>
            </div>
        </div>
        
        <Fragment slot="footer">
            <Button
                id="confirm-export"
                type="button"
                variant="action"
                size="md"
                class="w-full sm:ml-3 sm:w-auto"
            >
                Exportar CSV
            </Button>
            <Button
                id="cancel-export"
                type="button"
                variant="secondary"
                size="md"
                class="mt-3 w-full sm:mt-0 sm:w-auto"
            >
                Cancelar
            </Button>
        </Fragment>
    </Modal>

    <script>
        import { FormsManager } from '../../lib/forms-manager.ts';
        
        const formsManager = new FormsManager();
        
        document.addEventListener('DOMContentLoaded', function() {
            formsManager.loadForms();
            
            // Event listeners
            const refreshBtn = document.getElementById('refresh-btn');
            const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
            const closeModal = document.getElementById('close-modal');
            const exportBtn = document.getElementById('export-btn');
            const cancelExport = document.getElementById('cancel-export');
            const confirmExport = document.getElementById('confirm-export');
            
            if (refreshBtn) {
                refreshBtn.addEventListener('click', () => formsManager.loadForms(1, true));
            }
            
            if (statusFilter) {
                statusFilter.addEventListener('change', () => formsManager.filterForms());
            }
            
            if (closeModal) {
                closeModal.addEventListener('click', () => formsManager.hideModal());
            }
            
            if (exportBtn) {
                exportBtn.addEventListener('click', () => formsManager.showExportModal());
            }
            
            if (cancelExport) {
                cancelExport.addEventListener('click', () => formsManager.hideExportModal());
            }
            
            if (confirmExport) {
                confirmExport.addEventListener('click', () => formsManager.exportCSV());
            }
            
            // Event delegation for dynamic content
            document.addEventListener('click', function(event) {
                const target = event.target as HTMLElement;
                
                // Sort headers
                const sortHeader = target.closest('.sort-header') as HTMLElement;
                if (sortHeader) {
                    const column = sortHeader.dataset.column;
                    if (column) formsManager.sortBy(column);
                    return;
                }
                
                // Pagination buttons
                const paginationBtn = target.closest('.pagination-btn') as HTMLElement;
                if (paginationBtn && !paginationBtn.disabled) {
                    const page = paginationBtn.dataset.page;
                    if (page) formsManager.changePage(parseInt(page));
                    return;
                }
                
                // Status tags
                const statusTag = target.closest('.status-tag') as HTMLElement;
                if (statusTag) {
                    const formId = statusTag.dataset.formId;
                    if (formId) formsManager.toggleStatusDropdown(formId);
                    return;
                }
                
                // Status options
                const statusOption = target.closest('.status-option') as HTMLElement;
                if (statusOption) {
                    const formId = statusOption.dataset.formId;
                    const status = statusOption.dataset.status;
                    if (formId && status) formsManager.updateFormStatus(formId, status);
                    return;
                }
                
                // View form buttons
                const viewFormBtn = target.closest('.view-form-btn') as HTMLElement;
                if (viewFormBtn) {
                    const formId = viewFormBtn.dataset.formId;
                    if (formId) formsManager.viewForm(formId);
                    return;
                }
                
                // Close dropdowns when clicking outside
                if (!target.closest('[id^="status-dropdown-"]') && !target.closest('[id^="status-tag-"]')) {
                    document.querySelectorAll('[id^="status-dropdown-"]').forEach((dropdown) => {
                        dropdown.classList.add('hidden');
                    });
                }
            });
        });
    </script>
</DashboardLayout>