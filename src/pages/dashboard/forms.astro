---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import SectionHeader from '../../components/dashboard/SectionHeader.astro';
import StatsCard from '../../components/dashboard/StatsCard.astro';
import Card from '../../components/dashboard/Card.astro';
import EmptyState from '../../components/dashboard/EmptyState.astro';
import Button from '../../components/Button.astro';

const totalIcon = `<svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m0 0V9a2 2 0 012-2h2a2 2 0 012 2v4.01" />
</svg>`;

const weekIcon = `<svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>`;

const pendingIcon = `<svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>`;

const refreshIcon = `<svg class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
</svg>`;
---

<DashboardLayout title="Formularios de Contacto">
    <div class="space-y-6">
        <!-- Header -->
        <SectionHeader 
            title="Formularios de Contacto" 
            description="Gestiona y revisa todos los formularios de contacto recibidos."
        >
            <Fragment slot="actions">
                <Button
                    id="refresh-btn"
                    variant="secondary"
                    size="sm"
                >
                    <Fragment set:html={refreshIcon} />
                    Actualizar
                </Button>
            </Fragment>
        </SectionHeader>

        <!-- Stats -->
        <div class="grid grid-cols-1 gap-5 sm:grid-cols-3">
            <StatsCard 
                title="Total"
                value=""
                icon={totalIcon}
                iconColor="bg-blue-500"
                isLoading={false}
            >
                <span id="total-forms">Cargando...</span>
            </StatsCard>

            <StatsCard 
                title="Esta semana"
                value=""
                icon={weekIcon}
                iconColor="bg-green-500"
                isLoading={false}
            >
                <span id="week-forms">Cargando...</span>
            </StatsCard>

            <StatsCard 
                title="Pendientes"
                value=""
                icon={pendingIcon}
                iconColor="bg-yellow-500"
                isLoading={false}
            >
                <span id="pending-forms">Cargando...</span>
            </StatsCard>
        </div>

        <!-- Forms Table -->
        <Card>
            <div class="mb-4 flex justify-between items-center">
                <h4 class="text-lg font-medium text-gray-900">Lista de Formularios</h4>
                <div class="flex space-x-2">
                    <select id="status-filter" class="border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">Todos los estados</option>
                        <option value="pending">Pendiente</option>
                        <option value="read">Leído</option>
                        <option value="replied">Respondido</option>
                    </select>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loading-state" class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
                <p class="mt-2 text-sm text-gray-500">Cargando formularios...</p>
            </div>

            <!-- Empty State -->
            <div id="empty-state" class="hidden">
                <EmptyState 
                    title="No hay formularios"
                    description="Aún no se han recibido formularios de contacto."
                    icon={totalIcon}
                />
            </div>

            <!-- Forms Table -->
            <div id="forms-table" class="hidden">
                <div class="overflow-hidden">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Remitente
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Mensaje
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Fecha
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Estado
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Acciones
                                </th>
                            </tr>
                        </thead>
                        <tbody id="forms-tbody" class="bg-white divide-y divide-gray-200">
                            <!-- Forms will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </Card>
    </div>

    <!-- Form Detail Modal -->
    <div id="form-modal" class="fixed inset-0 z-50 overflow-y-auto hidden">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500/40 transition-opacity z-40"></div>
            
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full relative z-50">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                                Detalle del Formulario
                            </h3>
                            <div class="mt-4 space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Nombre:</label>
                                    <p id="modal-name" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Email:</label>
                                    <p id="modal-email" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Teléfono:</label>
                                    <p id="modal-phone" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Mensaje:</label>
                                    <p id="modal-message" class="mt-1 text-sm text-gray-900 whitespace-pre-wrap"></p>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700">Fecha:</label>
                                    <p id="modal-date" class="mt-1 text-sm text-gray-900"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <Button
                        id="close-modal"
                        type="button"
                        variant="action"
                        size="md"
                        class="w-full sm:ml-3 sm:w-auto"
                    >
                        Cerrar
                    </Button>
                </div>
            </div>
        </div>
    </div>

    <script>
        import { authenticatedFetch } from '../../lib/client-api.ts';
        
        interface FormData {
            id: string;
            name: string;
            email: string;
            phone?: string;
            message: string;
            createdAt: string;
            status?: 'pending' | 'read' | 'replied';
        }
        
        let allForms: FormData[] = [];
        let filteredForms: FormData[] = [];
        
        document.addEventListener('DOMContentLoaded', function() {
            loadForms();
            
            // Event listeners
            const refreshBtn = document.getElementById('refresh-btn');
            const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
            const closeModal = document.getElementById('close-modal');
            
            if (refreshBtn) {
                refreshBtn.addEventListener('click', loadForms);
            }
            
            if (statusFilter) {
                statusFilter.addEventListener('change', filterForms);
            }
            
            if (closeModal) {
                closeModal.addEventListener('click', hideModal);
            }
            
            // Close modal on backdrop click
            const modal = document.getElementById('form-modal');
            if (modal) {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        hideModal();
                    }
                });
            }
        });
        
        async function loadForms() {
            try {
                showLoading();
                
                const response = await authenticatedFetch('/api/forms');
                if (response.ok) {
                    allForms = await response.json();
                    filteredForms = [...allForms];
                    
                    updateStats();
                    renderFormsTable();
                    
                } else {
                    console.error('Error loading forms:', await response.text());
                    showError('Error al cargar los formularios');
                }
            } catch (error) {
                console.error('Error loading forms:', error);
                showError('Error de conexión');
            }
        }
        
        function updateStats() {
            const totalElement = document.getElementById('total-forms');
            const weekElement = document.getElementById('week-forms');
            const pendingElement = document.getElementById('pending-forms');
            
            if (totalElement) {
                totalElement.textContent = allForms.length.toString();
            }
            
            // Calculate this week's forms
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            const thisWeekForms = allForms.filter(form => 
                new Date(form.createdAt) >= oneWeekAgo
            );
            
            if (weekElement) {
                weekElement.textContent = thisWeekForms.length.toString();
            }
            
            // Calculate pending forms (assuming default status is pending)
            const pendingForms = allForms.filter(form => 
                !form.status || form.status === 'pending'
            );
            
            if (pendingElement) {
                pendingElement.textContent = pendingForms.length.toString();
            }
        }
        
        function filterForms() {
            const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
            const selectedStatus = statusFilter?.value;
            
            if (!selectedStatus) {
                filteredForms = [...allForms];
            } else {
                filteredForms = allForms.filter(form => 
                    (form.status || 'pending') === selectedStatus
                );
            }
            
            renderFormsTable();
        }
        
        function renderFormsTable() {
            const loadingState = document.getElementById('loading-state');
            const emptyState = document.getElementById('empty-state');
            const formsTable = document.getElementById('forms-table');
            const tbody = document.getElementById('forms-tbody');
            
            // Hide loading
            if (loadingState) loadingState.classList.add('hidden');
            
            if (filteredForms.length === 0) {
                if (emptyState) emptyState.classList.remove('hidden');
                if (formsTable) formsTable.classList.add('hidden');
                return;
            }
            
            if (emptyState) emptyState.classList.add('hidden');
            if (formsTable) formsTable.classList.remove('hidden');
            
            if (tbody) {
                tbody.innerHTML = '';
                
                filteredForms.forEach(form => {
                    const row = createFormRow(form);
                    tbody.appendChild(row);
                });
            }
        }
        
        function createFormRow(form: FormData): HTMLTableRowElement {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50';
            
            const status = form.status || 'pending';
            const statusColors = {
                pending: 'bg-yellow-100 text-yellow-800',
                read: 'bg-blue-100 text-blue-800',
                replied: 'bg-green-100 text-green-800'
            };
            
            const statusLabels = {
                pending: 'Pendiente',
                read: 'Leído',
                replied: 'Respondido'
            };
            
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${escapeHtml(form.name)}</div>
                    <div class="text-sm text-gray-500">${escapeHtml(form.email)}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${escapeHtml(form.message)}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${formatDate(form.createdAt)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${statusColors[status]}">
                        ${statusLabels[status]}
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button class="text-indigo-600 hover:text-indigo-900 mr-3" onclick="viewForm('${form.id}')">
                        Ver
                    </button>
                    <a href="mailto:${form.email}" class="text-green-600 hover:text-green-900">
                        Responder
                    </a>
                </td>
            `;
            
            return row;
        }
        
        function formatDate(dateString: string): string {
            const date = new Date(dateString);
            return date.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        function escapeHtml(text: string): string {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // Global function for row buttons
        (window as any).viewForm = function(formId: string) {
            const form = allForms.find(f => f.id === formId);
            if (form) {
                showFormModal(form);
            }
        };
        
        function showFormModal(form: FormData) {
            const modal = document.getElementById('form-modal');
            const modalName = document.getElementById('modal-name');
            const modalEmail = document.getElementById('modal-email');
            const modalPhone = document.getElementById('modal-phone');
            const modalMessage = document.getElementById('modal-message');
            const modalDate = document.getElementById('modal-date');
            
            if (modalName) modalName.textContent = form.name;
            if (modalEmail) modalEmail.textContent = form.email;
            if (modalPhone) modalPhone.textContent = form.phone || 'No proporcionado';
            if (modalMessage) modalMessage.textContent = form.message;
            if (modalDate) modalDate.textContent = formatDate(form.createdAt);
            
            if (modal) {
                modal.classList.remove('hidden');
            }
        }
        
        function hideModal() {
            const modal = document.getElementById('form-modal');
            if (modal) {
                modal.classList.add('hidden');
            }
        }
        
        function showLoading() {
            const loadingState = document.getElementById('loading-state');
            const emptyState = document.getElementById('empty-state');
            const formsTable = document.getElementById('forms-table');
            
            if (loadingState) loadingState.classList.remove('hidden');
            if (emptyState) emptyState.classList.add('hidden');
            if (formsTable) formsTable.classList.add('hidden');
        }
        
        function showError(message: string) {
            console.error(message);
            // Could add a toast notification here
        }
    </script>
</DashboardLayout>