---
export interface Props {
    id: string;
    title: string;
    maxWidth?: 'sm' | 'md' | 'lg' | 'xl';
    hidden?: boolean;
}

const { id, title, maxWidth = 'lg', hidden = true } = Astro.props;

const maxWidthClasses = {
    sm: 'sm:max-w-sm',
    md: 'sm:max-w-md',
    lg: 'sm:max-w-lg',
    xl: 'sm:max-w-xl'
};
---

<div id={id} class={`fixed inset-0 z-50 overflow-y-auto ${hidden ? 'hidden' : ''}`}>
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500/40 transition-opacity z-40"></div>
        
        <div class={`inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle ${maxWidthClasses[maxWidth]} sm:w-full relative z-50`}>
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 modal-title">
                            {title}
                        </h3>
                        <div class="mt-4">
                            <slot />
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <slot name="footer" />
            </div>
        </div>
    </div>
</div>

<script define:vars={{ id }}>
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById(id);
        if (modal) {
            // Close modal on backdrop click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.add('hidden');
                }
            });
        }
    });
</script>