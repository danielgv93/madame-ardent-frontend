---
export interface Props {
  variant?: 'primary' | 'secondary' | 'action' | 'danger';
  size?: 'sm' | 'md' | 'lg';
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  id?: string;
  disabled?: boolean;
}

const { 
  variant = 'primary', 
  size = 'md', 
  type = 'button',
  class: className = '',
  id,
  disabled = false
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 cursor-pointer';

const variantClasses = {
  primary: 'text-white bg-purple-600 hover:bg-purple-700 focus:ring-purple-500 shadow-sm',
  secondary: 'text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 focus:ring-indigo-500 shadow-sm',
  action: 'text-indigo-600 bg-indigo-50 border border-indigo-200 hover:bg-indigo-100 hover:text-indigo-700 focus:ring-indigo-500',
  danger: 'text-white bg-red-600 hover:bg-red-700 focus:ring-red-500 shadow-sm'
};

const sizeClasses = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-3 text-sm',
  lg: 'px-6 py-3 text-base'
};

const disabledClasses = 'opacity-50 cursor-not-allowed pointer-events-none';

const buttonClasses = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  disabled ? disabledClasses : '',
  className
].filter(Boolean).join(' ');
---

<button 
  type={type}
  class={buttonClasses}
  id={id}
  disabled={disabled}
  {...Astro.props}
>
  <slot />
</button>